#include <gtest/gtest.h>

#include <imb/ImbFormat.hpp>
#include "../src/netUtils.hpp"



class ImbFormatHeaderData : public ::testing::Test {
protected:
    unsigned char* byte_array;    
    ImbFormatHeaderData() {
        std::string hexString = R"(
            0080 0080 0080 0080 
            0210 
            0000
            00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
            40911500
        )";
        size_t byte_array_size = hexString.length() / 2;
        byte_array = new unsigned char[byte_array_size];
        hexStringToByteArray(hexString, byte_array, byte_array_size);
    }

    ~ImbFormatHeaderData() override {
        delete[] byte_array;
    }
};


class ImbFormatRealData : public ::testing::Test {
protected:
    unsigned char* byte_array;    
    ImbFormatRealData() {
        std::string hexString = R"(
            0080 0080 0080 0080
            0210
            0000
            00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
            40911500

            0e000000
            00000000
            16000819
            00000000 00000000 00000000 00000000 00000000 00000000 00000000
            66b0
            63265a50
            3000000a
            0b7445c0
            50000cdc
            c4c3e000
            020412e5
            39339c72
            d663
            c800
            000000d2 06ec20d6 06ac20da 066c20de 062c20d2 05fc20d6 05bc20da 057c20de 053c20d2050c20d604cc20da048c20de044c20d2041c20d603dc20da039c20de035c20d2032c20d602ec20da02ac20de026c20d2023c20d601fc20da01bc20de017c20d2014c20d6010c20da00cc20de008c20d2005c20d6001c21a40fbc11ac0f3c11a40ecc11ac0e4c11a40ddc11ac0d5c11a40cec11ac0c6c11a40bfc11ac0b7c11a40b0c11ac0a8c11a40a1c11ac099c11a4092c11ac08ac11a4083c1348077c1348068c1348059c134804ac134803bc134802cc100801dc100800ec10000ffc00000e1c00000c3c00000a5c0000087c0000052c0000016c00000b4bf0000f0be0000f03e0000b43f0000164000005240000087400000a5400000c3400000e1400000ff4000800e4100801d4134802c4134803b4134804a413480594134806841348077411a4083411ac08a411a4092411ac099411a40a1411ac0a8411a40b0411ac0b7411a40bf411ac0c6411a40ce411ac0d5411a40dd411ac0e4411a40ec411ac0f3411a40fb410d6001420d2005420de008420da00c420d6010420d2014420de017420da01b420d601f420d2023420de026420da02a420d602e420d2032420de035420da039420d603d420d2041420de044420da048420d604c420d2050420de053420da057420d605b420d205f420de062420da066420d606a420d206e

        size_t byte_array_size = hexString.length() / 2;
        byte_array = new unsigned char[byte_array_size];
        hexStringToByteArray(hexString, byte_array, byte_array_size);
    }

    ~ImbFormatRealData() override {
        delete[] byte_array;
    }
};

TEST_F(ImbFormatHeaderData, PacketHeader_correct_data) {
    m3::imb::PacketHeader packetHeader(byte_array);
    ASSERT_EQ(packetHeader.synchronizationWord[0], 0x8000);
    ASSERT_EQ(packetHeader.synchronizationWord[1], 0x8000);
    ASSERT_EQ(packetHeader.synchronizationWord[2], 0x8000);
    ASSERT_EQ(packetHeader.synchronizationWord[3], 0x8000);
    ASSERT_EQ(packetHeader.dataType, m3::imb::DataType::FloatComplex);
    ASSERT_EQ(packetHeader.packetBodySize, 1413440);
}